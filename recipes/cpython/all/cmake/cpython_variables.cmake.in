function(PYTHON@PY_VERSION_MAJOR@_ADD_LIBRARY name)
    cmake_parse_arguments(PARSE_ARGV 1 PYTHON_ADD_LIBRARY "STATIC;SHARED;MODULE;WITH_SOABI" "" "")
    if(PYTHON_ADD_LIBRARY_STATIC)
        set(type STATIC)
    elseif(PYTHON_ADD_LIBRARY_SHARED)
        set(type SHARED)
    else()
        set(type MODULE)
    endif()
    add_library(${name} ${type} ${PYTHON_ADD_LIBRARY_UNPARSED_ARGUMENTS})
    get_property(type TARGET ${name} PROPERTY TYPE)
    if(type STREQUAL "MODULE_LIBRARY")
        target_link_libraries(${name} PRIVATE Python::Python)
        set_property(TARGET ${name} PROPERTY PREFIX "")
        if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
            set_property(TARGET ${name} PROPERTY SUFFIX ".pyd")
        endif()
        if(PYTHON_ADD_LIBRARY_WITH_SOABI AND PYTHON_SOABI)
            get_property(suffix TARGET ${name} PROPERTY SUFFIX)
            if(NOT suffix)
                set(suffix "${CMAKE_SHARED_MODULE_SUFFIX}")
            endif()
            set_property(TARGET ${name} PROPERTY SUFFIX ".${${PYTHON_SOABI}${suffix}")
        endif()
    else()
        if(PYTHON_ADD_LIBRARY_WITH_SOABI)
            message(AUTHOR_WARNING "FindPython: Option `WITH_SOABI` is only supported for `MODULE` library type.")
        endif()
            target_link_libraries(${name} PRIVATE Python::Python)
    endif()
endfunction()

